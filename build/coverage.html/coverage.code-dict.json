{"/home/travis/build/npmtest/node-npmtest-gulp-jsdoc/test.js":"/* istanbul instrument in package npmtest_gulp_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc/lib.npmtest_gulp_jsdoc.js":"/* istanbul instrument in package npmtest_gulp_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_jsdoc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_jsdoc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-jsdoc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_jsdoc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_jsdoc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_jsdoc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_jsdoc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_jsdoc.__dirname + '/lib.npmtest_gulp_jsdoc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc/node_modules/gulp-jsdoc/index.js":"(function(){\n  'use strict';\n\n  var through2 = require('through2'),\n    path = require('path'),\n    gutil = require('gulp-util');\n\n  var File = gutil.File;\n  var PluginError = gutil.PluginError;\n\n  var marked = require('marked');\n\n  var Parser = require('./lib/parser.js');\n  var Generator = require('./lib/generator.js');\n\n  /**\n   * That's the plugin parser\n   */\n\n  var streamParser = function (infos, name) {\n    name = name || 'jsdoc.json';\n\n    var firstFile = null;\n    var readme = null;\n\n    var wp = new Parser(infos);\n\n    var bufferFiles = function(file, enc, next){\n      if (file.isNull()) return; // ignore\n      if (file.isStream()) return this.emit('error', new PluginError('gulp-jsdoc',  'Streaming not supported'));\n\n      // Store firstFile to get a base and cwd later on\n      if (!firstFile)\n        firstFile = file;\n\n      if (/[.]js$/i.test(file.path))\n        wp.parse(file);\n      else if(/readme(?:[.]md)?$/i.test(file.path))\n        readme = marked(file.contents.toString('utf8'));\n\n      next();\n    };\n\n    var endStream = function(conclude){\n      // Nothing? Exit right away\n      if (!firstFile){\n        conclude();\n        return;\n      }\n\n      var data;\n      try{\n        data = JSON.stringify(wp.complete(), null, 2);\n        // data = parser(options, filemap));\n      }catch(e){\n        return this.emit('error', new PluginError('gulp-jsdoc',\n          'Oooooh! Failed parsing with jsdoc. What did you do?! ' + e));\n      }\n\n      // Pump-up the generated output\n      var vinyl = new File({\n        cwd: firstFile.cwd,\n        base: firstFile.base,\n        path: path.join(firstFile.base, name),\n        contents: new Buffer(data)\n      });\n\n      // Possibly stack-up the readme, if there was any in the first place\n      vinyl.readme = readme;\n\n      // Add that to the stream...\n      this.push(vinyl);\n\n      conclude();\n    };\n\n    // That's it for the parser\n    return through2.obj(bufferFiles, endStream);\n  };\n\n  var streamGenerator = function(destination, template, options){\n    var gp = new Generator(destination, template, options);\n\n    var processor = function(file, enc, next){\n      if (file.isNull()) return; // ignore\n      if (file.isStream()) return this.emit('error', new PluginError('gulp-jsdoc',  'Streaming not supported'));\n      try{\n        gp.render(file);\n      }catch(e){\n        return this.emit('error', new PluginError('gulp-jsdoc',\n          'Oooooh! Failed rendering with jsdoc. What did you do?! ' + e));\n      }\n      next();\n    };\n\n    return through2.obj(processor);\n  };\n\n  // // Wrap reporter helper\n  // var wrapReporter = function(reporter){\n  //   return function(options){\n  //     return through2.obj(function(file, enc, next){\n  //       var warnings = JSON.parse(file.contents.toString('utf8')).warnings;\n  //       if(warnings && warnings.length){\n  //         // Don't trust the (yahoo) reporter too much\n  //         try{\n  //           reporter(warnings, options);\n  //         }catch(e){\n  //           return this.emit('error', new PluginError('gulp-jsdoc', 'Reporter crashed!' + e));\n  //         }\n  //       }\n  //       this.push(file);\n  //       next();\n  //     });\n  //   };\n  // };\n\n  var jsdoc = function(destination, template, infos, buildOptions){\n    return gutil.combine(\n      jsdoc.parser(infos),\n      // jsdoc.reporter(),\n      jsdoc.generator(destination, template, buildOptions)\n    )();\n  };\n\n  // // Yui default, provided reporter\n  // jsdoc.yuiReporter = wrapReporter(require('./lib/uglyreporter'));\n\n  // // Our own reporter\n  // jsdoc.chalkReporter = wrapReporter(require('./lib/chalkreporter'));\n\n  // // Default to chalk, nicier :)\n  // jsdoc.reporter = jsdoc.chalkReporter;\n\n  jsdoc.generator = streamGenerator;\n\n  jsdoc.parser = streamParser;\n\n  module.exports = jsdoc;\n\n}());\n\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc/node_modules/gulp-jsdoc/lib/parser.js":"/**\n * @file Parser\n *\n * @summary This is a wrapper around jsdoc parsing infrastructure that generates doc description\n *\n * @version ${ pkg.version }\n * @author ${ pkg.author.name }\n *\n * @license ${ pkg.license }.\n * @copyright ${ pkg.author.name }\n * @name parser.js\n * @unknownTag tag\n */\n\n(function(){\n  'use strict';\n\n  // Dependencies\n  var augment = require('jsdoc/lib/jsdoc/augment');\n  var borrow = require('jsdoc/lib/jsdoc/borrow');\n  var parser = require('jsdoc/lib/jsdoc/src/parser');\n\n  var path = require('path');\n\n  var Parser = function(infs){\n    // Start by resolving defaults for the infos object\n    infs = infs || {};\n\n    var informations = {\n      name: '',\n      kind: 'package',\n      longname: '',\n      description: '',\n      version: '',\n      licenses: [],\n      tags: {\n        allowUnknownTags: true\n      },\n      plugins: false\n    };\n\n    Object.keys(informations).forEach(function(key){\n      if(key in infs)\n        informations[key] = infs[key];\n    });\n\n    // Validator XXX\n    global.env.conf = global.env.conf || {};\n    global.env.conf.tags = informations.tags;\n    global.app = {\n      jsdoc: {\n        name: require('jsdoc/lib/jsdoc/name')\n      }\n    };\n\n    if(!informations.longname)\n      informations.longname = informations.kind + ':' + informations.name;\n\n    // Create actual jsdoc parser\n    var innerParser = new parser.Parser();\n\n    if (informations.plugins) {\n      var plugins = require('jsdoc/lib/jsdoc/plugins');\n      informations.plugins = informations.plugins.map(function(item){\n        return path.resolve(path.join(__dirname, '..', 'node_modules', 'jsdoc'), item);\n      });\n      plugins.installPlugins(informations.plugins, innerParser);\n    }\n\n    // Attach handles\n    var handlers = require('jsdoc/lib/jsdoc/src/handlers');\n    handlers.attachTo(innerParser);\n\n    // Set file list up\n    var parsedFiles = informations.files = [];\n\n    // Do parse\n    this.parse = function(vinyl){\n      var data = vinyl.contents.toString('utf8');\n      // Don't treat empty files\n      if (data.length) {\n        // XXX butt-ugly hack - see #5 and 3.3.0-alpha5 release of jsdoc\n        env.sourceFiles = [vinyl.base];\n        innerParser._parseSourceCode(data, vinyl.path);\n        parsedFiles.push(vinyl.path);\n      }\n    };\n\n    this.complete = function(){\n      // Get buffer\n      var buf = innerParser._resultBuffer;\n\n      // Push generic package infos\n      buf.push(informations);\n\n      // Borrow and augment shit\n      borrow.indexAll(buf);\n      augment.addInherited(buf);\n      borrow.resolveBorrows(buf);\n\n      // Return buf\n      return buf;\n    };\n  };\n\n  module.exports = Parser;\n\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc/node_modules/gulp-jsdoc/gulpfile.js":"(function(){\n  'use strict';\n\n  // Gulp\n  var gulp = require('gulp');\n  var gutil = require('gulp-util');\n\n  // Some basic linting\n  var eslint = require('gulp-eslint');\n  var jshint = require('gulp-jshint');\n\n  var jsreporter = require('jshint-stylish');\n\n  var fs = require('fs');\n  var jsconfig = JSON.parse(fs.readFileSync('./.jshintrc'));\n  var esconfig = JSON.parse(fs.readFileSync('./.eslintrc'));\n\n  gulp.task('lint', function(){\n    gulp.src([\n      'gulpfile.js',\n      'index.js',\n      'lib/**/*.js'\n    ])\n    .pipe(gutil.combine(\n      eslint(esconfig),\n      eslint.format(),\n      jshint(jsconfig),\n      jshint.reporter(jsreporter)\n    )());\n  });\n\n\n\n\n  var template = require('gulp-template');\n  var jsdoc = require('./');\n\n  var pkg = require('./package.json');\n\n  var opts = {\n    showPrivate: true,\n    monospaceLinks: true,\n    cleverLinks: true,\n    outputSourceFiles: true\n  };\n\n  var tpl = {\n    path: 'ink-docstrap',\n    systemName      : pkg.name,\n    footer          : 'Generated with gulp',\n    copyright       : 'Copyright WebItUp 2014',\n    navType         : 'vertical',\n    theme           : 'journal',\n    linenums        : true,\n    collapseSymbols : false,\n    inverseNav      : false\n  };\n\n  // Amelia\n  // Cerulean\n  // Cosmo\n  // Cyborg\n  // Flatly\n  // Journal\n  // Readable\n  // Simplex\n  // Slate\n  // Spacelab\n  // Spruce\n  // Superhero\n  // United\n\n  gulp.task('doc-simple', function() {\n    gulp.src([\n      'index.js',\n      'lib/**/*.js'\n    ])\n    // Process source files first\n    .pipe(template({pkg: pkg}))\n    // Then process it\n    .pipe(jsdoc('./doc/jsdoc-simple'));\n  });\n\n  gulp.task('doc-inked', function() {\n    gulp.src([\n      'README.md',\n      'index.js',\n      'lib/**/*.js'\n    ])\n    // Process source files first\n    .pipe(template({pkg: pkg}))\n    // Then parse\n    .pipe(jsdoc.parser(/*{\n      name: pkg.name,\n      description: pkg.description,\n      version: pkg.version,\n      licenses: pkg.licenses || [pkg.license]\n    }*/))\n    // Then generate the documentation and\n    .pipe(jsdoc.generator('./doc/jsdoc-inked', tpl, opts));\n  });\n\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jsdoc/node_modules/gulp-jsdoc/lib/generator.js":"/**\n * This is the documentation generator.\n * Unfortunately, there is now way we can make it streamy - doc generation is entirely\n * delegated to the opaqure publish method of each template...\n * Also, jsdoc structure requires us to:\n * - manipulate global variables\n * - copy over templates into node_modules\n * ... and there is little to be done - apart maybe changing jsdoc organization radically?\n * :(\n */\n\n(function(){\n  'use strict';\n\n  var path = require('path');\n  var fs = require('fs');\n  var wrench = require('wrench');\n  var taffy = require('taffydb').taffy;\n\n  // Unfortunately, jsdoc rely on globals for the templating output part\n  var env = global.env = {};\n\n  // Some templates may need these and crash for the lack of it :/\n  (function(){\n    var jsdocPkg = require('jsdoc/package.json');\n    env.version = {\n      number: jsdocPkg.version,\n      revision: new Date( parseInt(jsdocPkg.revision, 10) ).toUTCString()\n    };\n  }());\n\n  // Init other global objects\n  env.opts = env.opts || {};\n  env.conf = env.conf || {};\n  env.conf.templates = env.conf.templates || {};\n  env.conf.templates['default'] = env.conf.templates['default'] || {};\n\n  // We need the location of jsboot module because we MUST copy custom templates there :(((\n  // Also, part of jsdoc won't even boot without this :(\n  var jsdocRoot = env.dirname = path.dirname(require.resolve('jsdoc/cli'));\n\n  var Generator = function(destination, template, options){\n    options = options || {};\n\n    env.conf.tags = {\n      allowUnknownTags: true\n    };\n\n    env.opts['private'] = !!options.showPrivate;\n\n    env.conf.templates.monospaceLinks = !!options.monospaceLinks;\n    env.conf.templates.cleverLinks = !!options.cleverLinks;\n    env.conf.templates['default'].outputSourceFiles = ('outputSourceFiles' in options) ? options.outputSourceFiles : true;\n\n    template = template || {};\n\n    // Overload conf object with optional template\n    Object.keys(template).forEach(function(key){\n      if(key != 'path')\n        env.conf.templates[key] = template[key];\n    });\n\n    // Magic do\n    if(template.path == 'ink-docstrap'){\n      template.path = path.join(__dirname, '..', 'node_modules', 'ink-docstrap', 'template');\n    }\n\n    if(template.path && fs.existsSync(template.path)){\n      env.opts.template = path.join(jsdocRoot, path.basename(path.dirname(path.dirname(template.path))) + '-' + path.basename(path.dirname(template.path)) + '-godamnawful');\n      // XXX this is god f damn awful jsdoc!!!\n      // Templates SHOULD instead require a separate jsdoc-template module...\n      // No one freakin uses rhino...\n      wrench.copyDirSyncRecursive(template.path, env.opts.template, {\n        forceDelete: true\n      });\n    }else\n      env.opts.template = path.join(jsdocRoot, 'templates/default');\n\n    env.opts.destination = destination || './doc/jsdoc';\n\n    var tpl;\n    try {\n    // XXX this is a terrible hack, to fix #1\n      (function(){\n        var offendingTpl = require.resolve(env.opts.template + '/publish');\n        if(offendingTpl in require.cache)\n          delete require.cache[offendingTpl];\n        var offending = require.resolve('jsdoc/lib/jsdoc/util/templateHelper');\n        if(offending in require.cache)\n          delete require.cache[offending];\n      }());\n\n      tpl = require(env.opts.template + '/publish');\n    }catch(e){\n      throw new Error('Unable to load template: ' + e.message || e);\n    }\n\n    // templates should include a publish.js file that exports a \"publish\" function\n    if (!tpl.publish || typeof tpl.publish !== 'function')\n      throw new Error(env.opts.template + ' does not export a \"publish\" function. Global ' +\n            '\"publish\" functions are no longer supported.');\n\n    this.render = function(vinyl){\n      env.opts.readme = vinyl.readme;\n      tpl.publish(\n          taffy(vinyl.contents.toString('utf8')),\n          env.opts,\n          {children: []}\n      );\n\n      return {};\n    };\n  };\n\n  module.exports = Generator;\n\n}());\n"}